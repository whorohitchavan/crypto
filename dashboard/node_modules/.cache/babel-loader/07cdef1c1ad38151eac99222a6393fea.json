{"ast":null,"code":"/*!\n * Chart.js v4.3.0\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n\n    this._running = true;\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  _update() {\n    let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n\n        this._notify(chart, anims, date, 'complete');\n\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n\n    return anims;\n  }\n\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n\n    this._getAnims(chart).items.push(...items);\n  }\n\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  start(chart) {\n    const anims = this._charts.get(chart);\n\n    if (!anims) {\n      return;\n    }\n\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n\n    const anims = this._charts.get(chart);\n\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n\n    return true;\n  }\n\n  stop(chart) {\n    const anims = this._charts.get(chart);\n\n    if (!anims || !anims.items.length) {\n      return;\n    }\n\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n\n    anims.items = [];\n\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n\n}\n\nvar animator = /* #__PURE__ */new Animator();\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n\n};\n\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || elapsed < duration);\n\n    if (!this._active) {\n      this._target[prop] = to;\n\n      this._notify(true);\n\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = elapsed / duration % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({\n        res,\n        rej\n      });\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n\n}\n\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n\n      if (!isObject(cfg)) {\n        return;\n      }\n\n      const resolved = {};\n\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach(prop => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {});\n    }\n\n    return animations;\n  }\n\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n\n    return animations;\n  }\n\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n\n  let options = target.options;\n\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n\n  return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n\n      break;\n    }\n\n    otherValue = stack.values[datasetIndex];\n\n    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n      value += otherValue;\n    }\n  }\n\n  return value;\n}\n\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n\n    if (positive && value > 0 || !positive && value < 0) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {\n    chart,\n    _cachedMeta: meta\n  } = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {\n    iScale,\n    vScale,\n    index: datasetIndex\n  } = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {\n      [iAxis]: index,\n      [vAxis]: value\n    } = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent, {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n\n    delete stacks[axis][datasetIndex];\n\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = mode => mode === 'reset' || mode === 'none';\n\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\n\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {\n  keys: getSortedDatasetIndices(chart, true),\n  values: null\n};\n\nclass DatasetController {\n  static defaults = {};\n  static datasetElementType = null;\n  static dataElementType = null;\n\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale ? meta.vScale : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  _destroy() {\n    const meta = this._cachedMeta;\n\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    this._resyncElements(resetNewElements);\n\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  parse(start, count) {\n    const {\n      _cachedMeta: meta,\n      _data: data\n    } = this;\n    const {\n      iScale,\n      _stacked\n    } = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n\n          prev = cur;\n        }\n      }\n\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  parsePrimitiveData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n\n    return parsed;\n  }\n\n  parseArrayData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n\n    return parsed;\n  }\n\n  parseObjectData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n\n    return parsed;\n  }\n\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {\n      mode\n    });\n  }\n\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n\n    const otherScale = this._getOtherScale(scale);\n\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    const {\n      min: otherMin,\n      max: otherMax\n    } = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n\n      if (sorted) {\n        break;\n      }\n    }\n\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n\n    return values;\n  }\n\n  getMaxOverflow() {\n    return false;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  update(mode) {}\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || elements.length - start;\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n\n      if (element.hidden) {\n        continue;\n      }\n\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  _resolveElementOptions(elementType) {\n    let mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n    let index = arguments.length > 2 ? arguments[2] : undefined;\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n\n    const context = () => this.getContext(index, active, mode);\n\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n\n    if (cached) {\n      return cached;\n    }\n\n    let options;\n\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n\n    const animations = new Animations(chart, options && options.animations);\n\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {\n      sharedOptions,\n      includeOptions\n    };\n  }\n\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: !active && this.getSharedOptions(options) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  _insertElements(start, count) {\n    let resetNewElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = arr => {\n      arr.length += count;\n\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {}\n\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n\n    meta.data.splice(start, count);\n  }\n\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n\n    const newCount = arguments.length - 2;\n\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n\n}\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n\n  return scale._cache.$bar;\n}\n\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\n\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n\n  return {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  };\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {\n      top: true,\n      right: true,\n      bottom: true,\n      left: true\n    };\n    return;\n  }\n\n  const {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  } = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, _ref, ratio) {\n  let {\n    inflateAmount\n  } = _ref;\n  properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\n\nclass BarController extends DatasetController {\n  static id = 'bar';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true\n      }\n    }\n  };\n\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  parseObjectData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n\n    return parsed;\n  }\n\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  getMaxOverflow() {\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      index,\n      _cachedMeta: {\n        vScale\n      }\n    } = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n\n    const ruler = this._getRuler();\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n        base,\n        head: base\n      } : this._calculateBarValuePixels(i);\n\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  _getStacks(last, dataIndex) {\n    const {\n      iScale\n    } = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type).filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n\n    const skipNull = meta => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n        stacks.push(meta.stack);\n      }\n\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n\n    const index = name !== undefined ? stacks.indexOf(name) : -1;\n    return index === -1 ? stacks.length - 1 : index;\n  }\n\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  _calculateBarValuePixels(index) {\n    const {\n      _cachedMeta: {\n        vScale,\n        _stacked,\n        index: datasetIndex\n      },\n      options: {\n        base: baseValue,\n        minBarLength\n      }\n    } = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n\n      center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n\nclass BubbleController extends DatasetController {\n  static id = 'bubble';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n\n    return parsed;\n  }\n\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n\n    return parsed;\n  }\n\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n\n    return parsed;\n  }\n\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n\n    return max > 0 && max;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale\n    } = this._cachedMeta;\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    if (values.$shared) {\n      values = Object.assign({}, values, {\n        $shared: false\n      });\n    }\n\n    const radius = values.radius;\n\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n\n  return {\n    ratioX,\n    ratioY,\n    offsetX,\n    offsetY\n  };\n}\n\nclass DoughnutController extends DatasetController {\n  static id = 'doughnut';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      }\n    },\n    cutout: '50%',\n    rotation: 0,\n    circumference: 360,\n    radius: '100%',\n    spacing: 0,\n    indexAxis: 'r'\n  };\n  static descriptors = {\n    _scriptable: name => name !== 'spacing',\n    _indexable: name => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n\n            return [];\n          }\n\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = i => +data[i];\n\n      if (isObject(data[start])) {\n        const {\n          key = 'value'\n        } = this._parsing;\n\n        getter = i => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n\n        const rotation = controller._getRotation();\n\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min\n    };\n  }\n\n  update(mode) {\n    const chart = this.chart;\n    const {\n      chartArea\n    } = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n\n    const chartWeight = this._getRingWeight(this.index);\n\n    const {\n      circumference,\n      rotation\n    } = this._getRotationExtents();\n\n    const {\n      ratioX,\n      ratioY,\n      offsetX,\n      offsetY\n    } = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n\n    const circumference = this._getCircumference();\n\n    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    let startAngle = this._getRotation();\n\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n\n    return max;\n  }\n\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n\n}\n\nclass LineController extends DatasetController {\n  static id = 'line';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    showLine: true,\n    spanGaps: false\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category'\n      },\n      _value_: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      dataset: line,\n      data: points = [],\n      _dataset\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n\n}\n\nclass PolarAreaController extends DatasetController {\n  static id = 'polarArea';\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      }\n    },\n    indexAxis: 'r',\n    startAngle: 0\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n\n            return [];\n          }\n\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n\n      }\n    },\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n    return range;\n  }\n\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - radiusLength * this.index;\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n  }\n\n}\n\nclass PieController extends DoughnutController {\n  static id = 'pie';\n  static defaults = {\n    cutout: 0,\n    rotation: 0,\n    circumference: 360,\n    radius: '100%'\n  };\n}\n\nclass RadarController extends DatasetController {\n  static id = 'radar';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    }\n  };\n  static overrides = {\n    aspectRatio: 1,\n    scales: {\n      r: {\n        type: 'radialLinear'\n      }\n    }\n  };\n\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n}\n\nclass ScatterController extends DatasetController {\n  static id = 'scatter';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n  static overrides = {\n    interaction: {\n      mode: 'point'\n    },\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      data: points = []\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n      const {\n        dataset: line,\n        _dataset\n      } = meta;\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    }\n\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {\n      showLine\n    } = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PieController: PieController,\n  PolarAreaController: PolarAreaController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\n\n\nclass DateAdapterBase {\n  /**\n  * Override default date adapter methods.\n  * Accepts type parameter to define options type.\n  * @example\n  * Chart._adapters._date.override<{myAdapterOption: string}>({\n  *   init() {\n  *     console.log(this.options.myAdapterOption);\n  *   }\n  * })\n  */\n  static override(members) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  options;\n\n  constructor(options) {\n    this.options = options || {};\n  } // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n\n  init() {}\n\n  formats() {\n    return abstract();\n  }\n\n  parse() {\n    return abstract();\n  }\n\n  format() {\n    return abstract();\n  }\n\n  add() {\n    return abstract();\n  }\n\n  diff() {\n    return abstract();\n  }\n\n  startOf() {\n    return abstract();\n  }\n\n  endOf() {\n    return abstract();\n  }\n\n}\n\nvar adapters = {\n  _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {\n    controller,\n    data,\n    _sorted\n  } = metaset;\n  const iScale = controller._cachedMeta.iScale;\n\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\n\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {\n      index,\n      data\n    } = metasets[i];\n    const {\n      lo,\n      hi\n    } = binarySearch(metasets[i], axis, value, intersect);\n\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function (element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {\n      startAngle,\n      endAngle\n    } = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {\n      angle\n    } = getAngleFromPoint(element, {\n      x: position.x,\n      y: position.y\n    });\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n\n    if (distance < minDistance) {\n      items = [{\n        element,\n        datasetIndex,\n        index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n\n  return items;\n}\n\nvar Interaction = {\n  evaluateInteractionItems,\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach(meta => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        if (element && !element.skip) {\n          elements.push({\n            element,\n            datasetIndex: meta.index,\n            index\n          });\n        }\n      });\n      return elements;\n    },\n\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n\n        for (let i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex,\n            index: i\n          });\n        }\n      }\n\n      return items;\n    },\n\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n\n  }\n};\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({\n      position: pos,\n      options: {\n        stack,\n        stackWeight = 1\n      }\n    } = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && pos + stack,\n      stackWeight\n    });\n  }\n\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n\n  for (const wrap of layouts) {\n    const {\n      stack,\n      pos,\n      stackWeight\n    } = wrap;\n\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n\n    const _stack = stacks[stack] || (stacks[stack] = {\n      count: 0,\n      placed: 0,\n      weight: 0,\n      size: 0\n    });\n\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n\n  return stacks;\n}\n\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {\n    vBoxMaxWidth,\n    hBoxMaxHeight\n  } = params;\n  let i, ilen, layout;\n\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {\n      fullSize\n    } = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {\n    pos,\n    box\n  } = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n\n    const stack = stacks[layout.stack] || {\n      size: 0,\n      count: 1\n    };\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(pos => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n    const {\n      same,\n      other\n    } = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {\n    x,\n    y\n  } = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {\n      count: 1,\n      placed: 0,\n      weight: 1\n    };\n    const weight = layout.stackWeight / stack.weight || 1;\n\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    each(boxes.chartArea, layout => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      });\n    });\n  }\n\n};\n\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n\n  releaseContext(context) {\n    return false;\n  }\n\n  addEventListener(chart, type, listener) {}\n\n  removeEventListener(chart, type, listener) {}\n\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  isAttached(canvas) {\n    return true;\n  }\n\n  updateConfig(config) {}\n\n}\n\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n\n}\n\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\nconst eventListenerOptions = supportsEventListenerOptions ? {\n  passive: true\n} : false;\n\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\n\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {\n    x,\n    y\n  } = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n\n  const container = canvas && _getParentNode(canvas);\n\n  if (!container) {\n    return;\n  }\n\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n\n    if (width === 0 && height === 0) {\n      return;\n    }\n\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled(event => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n  addListener(canvas, type, proxy);\n  return proxy;\n}\n\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  releaseContext(context) {\n    const canvas = context.canvas;\n\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach(prop => {\n      const value = initial[prop];\n\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach(key => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n\n    return !!(container && container.isConnected);\n  }\n\n}\n\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return BasicPlatform;\n  }\n\n  return DomPlatform;\n}\n\nclass Element {\n  static defaults = {};\n  static defaultRoutes = undefined;\n  x;\n  y;\n  active = false;\n  options;\n  $animations;\n\n  tooltipPosition(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  getProps(props, final) {\n    const anims = this.$animations;\n\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this;\n    }\n\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n\n}\n\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n\n  const tickLength = scale._tickSize();\n\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n\n  return Math.max(spacing, 1);\n}\n\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n\n  return result;\n}\n\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n\n  return diff;\n}\n\nconst reverseAlign = align => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\n\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\n\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n\n  return result;\n}\n\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n\n    lineValue += validIndex < index ? offset : -offset;\n\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n\n  return lineValue;\n}\n\nfunction garbageCollect(caches, length) {\n  each(caches, cache => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {\n    top,\n    left,\n    bottom,\n    right,\n    chart\n  } = scale;\n  const {\n    chartArea,\n    scales\n  } = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n\n  return {\n    titleX,\n    titleY,\n    maxWidth,\n    rotation\n  };\n}\n\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  parse(raw, index) {\n    return raw;\n  }\n\n  getUserBounds() {\n    let {\n      _userMin,\n      _userMax,\n      _suggestedMin,\n      _suggestedMax\n    } = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n\n  getMinMax(canStack) {\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {\n        min,\n        max\n      };\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  getTicks() {\n    return this.ticks;\n  }\n\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  getLabelItems() {\n    let chartArea = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.chart.chartArea;\n\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n\n    return items;\n  }\n\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    const {\n      beginAtZero,\n      grace,\n      ticks: tickOpts\n    } = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    callback(this.options[name], [this]);\n  }\n\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n\n  determineDataLimits() {}\n\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n\n  buildTicks() {\n    return [];\n  }\n\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n\n  afterAutoSkip() {}\n\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {\n      chart,\n      options: {\n        ticks: tickOpts,\n        title: titleOpts,\n        grid: gridOpts\n      }\n    } = this;\n\n    const display = this._isVisible();\n\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      if (tickOpts.display && this.ticks.length) {\n        const {\n          first,\n          last,\n          widest,\n          highest\n        } = this._getLabelSizes();\n\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {\n      ticks: {\n        align,\n        padding\n      },\n      position\n    } = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n\n  isHorizontal() {\n    const {\n      axis,\n      position\n    } = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {\n      ctx,\n      _longestTextCache: caches\n    } = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {\n        data: {},\n        gc: []\n      };\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = idx => ({\n      width: widths[idx] || 0,\n      height: heights[idx] || 0\n    });\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights\n    };\n  }\n\n  getLabelForValue(value) {\n    return value;\n  }\n\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n\n  getValueForPixel(pixel) {}\n\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  getBaseValue() {\n    const {\n      min,\n      max\n    } = this;\n    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n  }\n\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n\n    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {\n      grid,\n      position,\n      border\n    } = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n\n    const alignBorderValue = function (pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {\n      position,\n      ticks: optionTicks\n    } = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {\n      align,\n      crossAlign,\n      padding,\n      mirror\n    } = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n\n        if (mirror) {\n          textOffset *= -1;\n        }\n\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += lineHeight / 2 * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n          case 'middle':\n            top -= height / 2;\n            break;\n\n          case 'bottom':\n            top -= height;\n            break;\n        }\n\n        switch (textAlign) {\n          case 'center':\n            left -= width / 2;\n            break;\n\n          case 'right':\n            left -= width;\n            break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {\n      position,\n      ticks\n    } = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {\n      position,\n      ticks: {\n        crossAlign,\n        mirror,\n        padding\n      }\n    } = this.options;\n\n    const labelSizes = this._getLabelSizes();\n\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {\n      textAlign,\n      x\n    };\n  }\n\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {\n        top: 0,\n        left: this.left,\n        bottom: chart.height,\n        right: this.right\n      };\n    }\n\n    if (position === 'top' || position === 'bottom') {\n      return {\n        top: this.top,\n        left: 0,\n        bottom: this.bottom,\n        right: chart.width\n      };\n    }\n  }\n\n  drawBackground() {\n    const {\n      ctx,\n      options: {\n        backgroundColor\n      },\n      left,\n      top,\n      width,\n      height\n    } = this;\n\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n\n    return 0;\n  }\n\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine({\n            x: item.x1,\n            y: item.y1\n          }, {\n            x: item.x2,\n            y: item.y2\n          }, item);\n        }\n\n        if (grid.drawTicks) {\n          drawLine({\n            x: item.tx1,\n            y: item.ty1\n          }, {\n            x: item.tx2,\n            y: item.ty2\n          }, {\n            color: item.tickColor,\n            width: item.tickWidth,\n            borderDash: item.tickBorderDash,\n            borderDashOffset: item.tickBorderDashOffset\n          });\n        }\n      }\n    }\n  }\n\n  drawBorder() {\n    const {\n      chart,\n      ctx,\n      options: {\n        border,\n        grid\n      }\n    } = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n\n    if (!axisWidth) {\n      return;\n    }\n\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  drawTitle() {\n    const {\n      ctx,\n      options: {\n        position,\n        title,\n        reverse\n      }\n    } = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: chartArea => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: chartArea => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: chartArea => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n\n}\n\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  get(id) {\n    return this.items[id];\n  }\n\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [parentScope ? defaults.get(parentScope) : {}, defaults.get(scope), item.defaults]);\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  add() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    this._each('register', args);\n  }\n\n  remove() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    this._each('unregister', args);\n  }\n\n  addControllers() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    this._each('register', args, this.controllers);\n  }\n\n  addElements() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    this._each('register', args, this.elements);\n  }\n\n  addPlugins() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n\n    this._each('register', args, this.plugins);\n  }\n\n  addScales() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n\n    this._each('register', args, this.scales);\n  }\n\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  removeControllers() {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n\n    this._each('unregister', args, this.controllers);\n  }\n\n  removeElements() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n\n    this._each('unregister', args, this.elements);\n  }\n\n  removePlugins() {\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n\n    this._each('unregister', args, this.plugins);\n  }\n\n  removeScales() {\n    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      args[_key10] = arguments[_key10];\n    }\n\n    this._each('unregister', args, this.scales);\n  }\n\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n\n      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n        this._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n\n    return this.plugins;\n  }\n\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n\n    return item;\n  }\n\n}\n\nvar registry = /* #__PURE__ */new Registry();\n\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n\n      this._notify(this._init, chart, 'uninstall');\n    }\n\n    return result;\n  }\n\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n\n}\n\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {\n    plugins,\n    localIds\n  };\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n\n  if (options === true) {\n    return {};\n  }\n\n  return options;\n}\n\nfunction createDescriptors(chart, _ref2, options, all) {\n  let {\n    plugins,\n    localIds\n  } = _ref2;\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n\n    if (opts === null) {\n      continue;\n    }\n\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {\n        plugin,\n        local: localIds[id]\n      }, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, _ref3, opts, context) {\n  let {\n    plugin,\n    local\n  } = _ref3;\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nfunction determineAxis(id) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n\n  for (var _len11 = arguments.length, scaleOptions = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {\n    scaleOptions[_key11 - 1] = arguments[_key11];\n  }\n\n  for (const opts of scaleOptions) {\n    const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n\n    if (axis) {\n      return axis;\n    }\n  }\n\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {\n      axis\n    };\n  }\n}\n\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter(d => d.xAxisID === id || d.yAxisID === id);\n\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n\n  return {};\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {\n    scales: {}\n  };\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{\n      axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{\n        axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n\n    this._resolverCache.clear();\n  }\n\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType, () => [[`datasets.${datasetType}`, '']]);\n  }\n\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`, () => [[`datasets.${datasetType}.transitions.${transition}`, `transitions.${transition}`], [`datasets.${datasetType}`, '']]);\n  }\n\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`, () => [[`datasets.${datasetType}.elements.${elementType}`, `datasets.${datasetType}`, `elements.${elementType}`, '']]);\n  }\n\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`, () => [[`plugins.${id}`, ...(plugin.additionalOptionScopes || [])]]);\n  }\n\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n\n    let cache = _scopeCache.get(mainScope);\n\n    if (!cache || resetCache) {\n      cache = new Map();\n\n      _scopeCache.set(mainScope, cache);\n    }\n\n    return cache;\n  }\n\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {\n      options,\n      type\n    } = this;\n\n    const cache = this._cachedScopes(mainScope, resetCache);\n\n    const cached = cache.get(keyLists);\n\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n\n    return array;\n  }\n\n  chartOptionScopes() {\n    const {\n      options,\n      type\n    } = this;\n    return [options, overrides[type] || {}, defaults.datasets[type] || {}, {\n      type\n    }, defaults, descriptors];\n  }\n\n  resolveNamedOptions(scopes, names, context) {\n    let prefixes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [''];\n    const result = {\n      $shared: true\n    };\n    const {\n      resolver,\n      subPrefixes\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n\n    return result;\n  }\n\n  createResolver(scopes, context) {\n    let prefixes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [''];\n    let descriptorDefaults = arguments.length > 3 ? arguments[3] : undefined;\n    const {\n      resolver\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n  }\n\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n\n  return cached;\n}\n\nconst hasFunction = value => isObject(value) && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\n\nfunction needContext(proxy, names) {\n  const {\n    isScriptable,\n    isIndexable\n  } = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n\n    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar version = \"4.3.0\";\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\n\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\n\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n\n  return item;\n}\n\nconst instances = {};\n\nconst getChart = key => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter(c => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n\n  for (const key of keys) {\n    const intKey = +key;\n\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n\n  if (isClick) {\n    return lastEvent;\n  }\n\n  return e;\n}\n\nfunction getDatasetArea(meta) {\n  const {\n    xScale,\n    yScale\n  } = meta;\n\n  if (xScale && yScale) {\n    return {\n      left: xScale.left,\n      right: xScale.right,\n      top: yScale.top,\n      bottom: yScale.bottom\n    };\n  }\n}\n\nclass Chart {\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register() {\n    registry.add(...arguments);\n    invalidatePlugins();\n  }\n\n  static unregister() {\n    registry.remove(...arguments);\n    invalidatePlugins();\n  }\n\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {\n      options: {\n        aspectRatio,\n        maintainAspectRatio\n      },\n      width,\n      height,\n      _aspectRatio\n    } = this;\n\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {\n        width,\n        height\n      };\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {\n      size: newSize\n    });\n    callback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(Object.keys(scaleOpts).map(id => {\n        const scaleOptions = scaleOpts[id];\n        const axis = determineAxis(id, scaleOptions);\n        const isRadial = axis === 'r';\n        const isHorizontal = axis === 'x';\n        return {\n          options: scaleOptions,\n          dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n          dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n        };\n      }));\n    }\n\n    each(items, item => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, scale => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n\n      metasets.splice(numData, numMeta - numData);\n    }\n\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  _removeUnreferencedMetasets() {\n    const {\n      _metasets: metasets,\n      data: {\n        datasets\n      }\n    } = this;\n\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n\n        meta = this.getDatasetMeta(i);\n      }\n\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {\n          datasetElementType,\n          dataElementType\n        } = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n\n    return newControllers;\n  }\n\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  reset() {\n    this._resetElements();\n\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n\n    this._checkEventBindings();\n\n    this._updateHiddenIndices();\n\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {\n        controller\n      } = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n\n    this._updateLayout(minPadding);\n\n    if (!animsDisabled) {\n      each(newControllers, controller => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    this.notifyPlugins('afterUpdate', {\n      mode\n    });\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    const {\n      _active,\n      _lastEvent\n    } = this;\n\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  _updateScales() {\n    each(this.scales, scale => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  _updateHiddenIndices() {\n    const {\n      _hiddenIndices\n    } = this;\n    const changes = this._getUniformDataChanges() || [];\n\n    for (const {\n      method,\n      start,\n      count\n    } of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n\n    const makeSet = idx => new Set(_dataChanges.filter(c => c[0] === idx).map((c, i) => i + ',' + c.splice(1).join(',')));\n\n    const changeSet = makeSet(0);\n\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n\n    return Array.from(changeSet).map(c => c.split(',')).map(a => ({\n      method: a[1],\n      start: +a[2],\n      count: +a[3]\n    }));\n  }\n\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    each(this.boxes, box => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n\n      if (box.configure) {\n        box.configure();\n      }\n\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({\n        datasetIndex: i\n      }) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {\n      mode\n    });\n  }\n\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {\n      meta,\n      index,\n      mode,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({\n        chart: this\n      });\n    }\n  }\n\n  draw() {\n    let i;\n\n    if (this._resizeBeforeDraw) {\n      const {\n        width,\n        height\n      } = this._resizeBeforeDraw;\n\n      this._resize(width, height);\n\n      this._resizeBeforeDraw = null;\n    }\n\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    const layers = this._layers;\n\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta) || this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {\n      chart: this,\n      type: 'chart'\n    }));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {\n        visible\n      });\n      this.update(ctx => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {\n      canvas,\n      ctx\n    } = this;\n\n    this._stop();\n\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image() {\n    return this.canvas.toDataURL(...arguments);\n  }\n\n  bindEvents() {\n    this.bindUserEvents();\n\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, type => _add(type, listener));\n  }\n\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached;\n\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      this._stop();\n\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(_ref4 => {\n      let {\n        datasetIndex,\n        index\n      } = _ref4;\n      const meta = this.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n\n    const eventFilter = plugin => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  _handleEvent(e, replay, inChartArea) {\n    const {\n      _active: lastActive = [],\n      options\n    } = this;\n    const useFinalPosition = replay;\n\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n\n    const isClick = _isClickEvent(e);\n\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      this._lastEvent = null;\n      callback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed || replay) {\n      this._active = active;\n\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n\n}\n\nfunction invalidatePlugins() {\n  return each(Chart.instances, chart => chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n  const {\n    startAngle,\n    pixelMargin,\n    x,\n    y,\n    outerRadius,\n    innerRadius\n  } = element;\n  let angleMargin = pixelMargin / outerRadius; // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n/**\n * Parse border radius from the provided options\n */\n\n\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2); // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n\n  const computeOuterLimit = val => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n  };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */\n\n\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\n\n\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  const {\n    x,\n    y,\n    startAngle: start,\n    pixelMargin,\n    innerRadius: innerR\n  } = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {\n    outerStart,\n    outerEnd,\n    innerStart,\n    innerEnd\n  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle); // The corner segment from point 2 to point 3\n\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    } // The line from point 3 to point 4\n\n\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y); // The corner segment from point 4 to point 5\n\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    } // The inner arc from point 5 to point b to point 6\n\n\n    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true); // The corner segment from point 6 to point 7\n\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    } // The line from point 7 to point 8\n\n\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y); // The corner segment from point 8 to point 1\n\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference\n  } = element;\n  let endAngle = element.endAngle;\n\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference,\n    options\n  } = element;\n  const {\n    borderWidth,\n    borderJoinStyle,\n    borderDash,\n    borderDashOffset\n  } = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nclass ArcElement extends Element {\n  static id = 'arc';\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n  static descriptors = {\n    _scriptable: true,\n    _indexable: name => name !== 'borderDash'\n  };\n  circumference;\n  endAngle;\n  fullCircles;\n  innerRadius;\n  outerRadius;\n  pixelMargin;\n  startAngle;\n\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {\n      angle,\n      distance\n    } = getAngleFromPoint(point, {\n      x: chartX,\n      y: chartY\n    });\n    const {\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius,\n      circumference\n    } = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return betweenAngles && withinRadius;\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius\n    } = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius'], useFinalPosition);\n    const {\n      offset,\n      spacing\n    } = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx) {\n    const {\n      options,\n      circumference\n    } = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n    ctx.restore();\n  }\n\n}\n\nfunction setStyle(ctx, options) {\n  let style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : options;\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment) {\n  let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const count = points.length;\n  const {\n    start: paramsStart = 0,\n    end: paramsEnd = count - 1\n  } = params;\n  const {\n    start: segmentStart,\n    end: segmentEnd\n  } = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\nfunction pathSegment(ctx, line, segment, params) {\n  const {\n    points,\n    options\n  } = line;\n  const {\n    count,\n    start,\n    loop,\n    ilen\n  } = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {\n    move = true,\n    reverse\n  } = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {\n    count,\n    start,\n    ilen\n  } = pathVars(points, segment, params);\n  const {\n    move = true,\n    reverse\n  } = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = index => (start + (reverse ? ilen - index : index)) % count;\n\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n\n    lastY = y;\n  }\n\n  drawX();\n}\n\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n\n  if (!path) {\n    path = line._path = new Path2D();\n\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {\n    segments,\n    options\n  } = line;\n\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n\n    if (segmentMethod(ctx, line, segment, {\n      start,\n      end: start + count - 1\n    })) {\n      ctx.closePath();\n    }\n\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nclass LineElement extends Element {\n  static id = 'line';\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  static descriptors = {\n    _scriptable: true,\n    _indexable: name => name !== 'borderDash' && name !== 'fill'\n  };\n\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n\n    const segments = _boundSegments(this, {\n      property,\n      start: value,\n      end: value\n    });\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n\n    const _interpolate = _getInterpolationMethod(options);\n\n    let i, ilen;\n\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {\n        start,\n        end\n      } = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n\n    return result.length === 1 ? result[0] : result;\n  }\n\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  path(ctx, start, count) {\n    const segments = this.segments;\n\n    const segmentMethod = _getSegmentMethod(this);\n\n    let loop = this._loop;\n    start = start || 0;\n    count = count || this.points.length - start;\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {\n        start,\n        end: start + count - 1\n      });\n    }\n\n    return !!loop;\n  }\n\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {\n    [axis]: value\n  } = el.getProps([axis], useFinalPosition);\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\n\nclass PointElement extends Element {\n  static id = 'point';\n  parsed;\n  skip;\n  stop;\n  /**\n  * @type {any}\n  */\n\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n  /**\n  * @type {any}\n  */\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx, area) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {}; // @ts-expect-error Fallbacks should never be hit in practice\n\n    return options.radius + options.hitRadius;\n  }\n\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n  const {\n    x,\n    y,\n    base,\n    width,\n    height\n  } = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {\n    left,\n    top,\n    right,\n    bottom\n  };\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {\n    enableBorderRadius\n  } = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount) {\n  let refRect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nclass BarElement extends Element {\n  static id = 'bar';\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {\n      inflateAmount,\n      options: {\n        borderColor,\n        backgroundColor\n      }\n    } = this;\n    const {\n      inner,\n      outer\n    } = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      base,\n      horizontal\n    } = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  BarElement: BarElement,\n  LineElement: LineElement,\n  PointElement: PointElement\n});\nconst BORDER_COLORS = ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)' // grey\n]; // Border colors with 50% transparency\n\nconst BACKGROUND_COLORS = /* #__PURE__ */BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset, i) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n  return i;\n}\n\nfunction getColorizer(chart) {\n  let i = 0;\n  return (dataset, datasetIndex) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(descriptors) {\n  let k;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(descriptor) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nvar plugin_colors = {\n  id: 'colors',\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  },\n\n  beforeLayout(chart, _args, options) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {\n        datasets\n      },\n      options: chartOptions\n    } = chart.config;\n    const {\n      elements\n    } = chartOptions;\n\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n    datasets.forEach(colorizer);\n  }\n\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {\n      x: pointAx,\n      y: pointAy\n    } = data[a];\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({ ...data[intermediateIndex1],\n            x: avgX\n          });\n        }\n\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({ ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(dataset => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {\n    iScale\n  } = meta;\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {\n    start,\n    count\n  };\n}\n\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {\n        _data,\n        indexAxis\n      } = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n\n      if (chart.options.parsing) {\n        return;\n      }\n\n      let {\n        start,\n        count\n      } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            return this._decimated;\n          },\n          set: function (d) {\n            this._data = d;\n          }\n        });\n      }\n\n      let decimated;\n\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n\n        default:\n          throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n\n};\n\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {\n      start,\n      end\n    } = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n\n  return parts;\n}\n\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n\n  return {\n    property,\n    start,\n    end\n  };\n}\n\nfunction _pointsFromSegments(boundary, line) {\n  const {\n    x = null,\n    y = null\n  } = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(_ref5 => {\n    let {\n      start,\n      end\n    } = _ref5;\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y\n      });\n      points.push({\n        x: last.x,\n        y\n      });\n    } else if (x !== null) {\n      points.push({\n        x,\n        y: first.y\n      });\n      points.push({\n        x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\n\nfunction _findSegmentEnd(start, end, points) {\n  for (; end > start; end--) {\n    const point = points[end];\n\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {\n      tension: 0\n    },\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\nfunction _decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\nfunction _getTargetPixel(fill, scale) {\n  let pixel = null;\n\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n\n  return pixel;\n}\n\nfunction _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n\n  return value;\n}\n\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n\n  return fill;\n}\n\nfunction _buildStackLine(source) {\n  const {\n    scale,\n    index,\n    line\n  } = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n\n  return new LineElement({\n    points,\n    options: {}\n  });\n}\n\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n\n    if (meta.index === index) {\n      break;\n    }\n\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n\n  return below;\n}\n\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {\n      first,\n      last,\n      point\n    } = findPoint(line, sourcePoint, 'x');\n\n    if (!point || first && last) {\n      continue;\n    }\n\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n\n      if (!last) {\n        break;\n      }\n    }\n  }\n\n  points.push(...postponed);\n}\n\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n\n  return {\n    first,\n    last,\n    point\n  };\n}\n\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    bounds = bounds || {\n      start: 0,\n      end: TAU\n    };\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n\n}\n\nfunction _getTarget(source) {\n  const {\n    chart,\n    fill,\n    line\n  } = source;\n\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n\n  return computeLinearBoundary(source);\n}\n\nfunction computeLinearBoundary(source) {\n  const {\n    scale = {},\n    fill\n  } = source;\n\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isNumberFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {\n    scale,\n    fill\n  } = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n\n  const value = _getTargetValue(fill, scale, start);\n\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n\n  return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n\n  const {\n    line,\n    scale,\n    axis\n  } = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {\n    above = color,\n    below = color\n  } = fillOption || {};\n\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {\n      line,\n      target,\n      above,\n      below,\n      area,\n      scale,\n      axis\n    });\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {\n    line,\n    target,\n    above,\n    below,\n    area,\n    scale\n  } = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {\n      line,\n      target,\n      color: above,\n      scale,\n      property\n    });\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n\n  fill(ctx, {\n    line,\n    target,\n    color: below,\n    scale,\n    property\n  });\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {\n    segments,\n    points\n  } = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n\n  for (const segment of segments) {\n    const {\n      start,\n      end\n    } = segment;\n    const firstPoint = points[start];\n\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n\n    lineLoop = !!target.pathSegment(ctx, segment, {\n      move: lineLoop\n    });\n\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {\n    line,\n    target,\n    property,\n    color,\n    scale\n  } = cfg;\n\n  const segments = _segments(line, target, property);\n\n  for (const {\n    source: src,\n    target: tgt,\n    start,\n    end\n  } of segments) {\n    const {\n      style: {\n        backgroundColor = color\n      } = {}\n    } = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {\n        move: lineLoop,\n        reverse: true\n      });\n      loop = lineLoop && targetLoop;\n\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {\n    top,\n    bottom\n  } = scale.chart.chartArea;\n  const {\n    property,\n    start,\n    end\n  } = bounds || {};\n\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\nvar index = {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {\n    boxHeight = fontSize,\n    boxWidth = fontSize\n  } = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter(item => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {\n      options,\n      ctx\n    } = this;\n\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n\n    const titleHeight = this._computeTitleHeight();\n\n    const {\n      boxWidth,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {\n      ctx,\n      maxWidth,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {\n        left: 0,\n        top,\n        row,\n        width: itemWidth,\n        height: itemHeight\n      };\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {\n      ctx,\n      maxHeight,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const {\n        itemWidth,\n        itemHeight\n      } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({\n          width: currentColWidth,\n          height: currentColHeight\n        });\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      hitboxes[i] = {\n        left,\n        top: currentColHeight,\n        col,\n        width: itemWidth,\n        height: itemHeight\n      };\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({\n      width: currentColWidth,\n      height: currentColHeight\n    });\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n\n    const titleHeight = this._computeTitleHeight();\n\n    const {\n      legendHitBoxes: hitboxes,\n      options: {\n        align,\n        labels: {\n          padding\n        },\n        rtl\n      }\n    } = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n\n    if (this.isHorizontal()) {\n      let row = 0;\n\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  _draw() {\n    const {\n      options: opts,\n      columnSizes,\n      lineWidths,\n      ctx\n    } = this;\n    const {\n      align,\n      labels: labelOpts\n    } = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {\n      padding\n    } = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {\n      boxWidth,\n      boxHeight,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n\n    const drawLegendBox = function (x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function (x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    const isHorizontal = this.isHorizontal();\n\n    const titleHeight = this._computeTitleHeight();\n\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor;\n      ctx.fillStyle = legendItem.fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  handleEvent(e) {\n    const opts = this.options;\n\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {\n    itemWidth,\n    itemHeight\n  };\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n\n  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n\n  return false;\n}\n\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: ctx => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {\n          labels: {\n            usePointStyle,\n            pointStyle,\n            textAlign,\n            color,\n            useBorderRadius,\n            borderRadius\n          }\n        } = chart.legend.options;\n        return chart._getSortedDatasetMetas().map(meta => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n\n    },\n    title: {\n      color: ctx => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: name => !name.startsWith('on'),\n    labels: {\n      _scriptable: name => !['generateLabels', 'filter', 'sort'].includes(name)\n    }\n  }\n};\n\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {\n      top,\n      left,\n      bottom,\n      right,\n      options\n    } = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n\n      maxWidth = bottom - top;\n    }\n\n    return {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    };\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal'\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n\n};\n\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n\n  return str;\n}\n\nfunction createTooltipItem(chart, item) {\n  const {\n    element,\n    datasetIndex,\n    index\n  } = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {\n    label,\n    value\n  } = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {\n    body,\n    footer,\n    title\n  } = tooltip;\n  const {\n    boxWidth,\n    boxHeight\n  } = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  let widthPadding = 0;\n\n  const maxLineWidth = function (line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n  each(body, bodyItem => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width,\n    height\n  };\n}\n\nfunction determineYAlign(chart, size) {\n  const {\n    y,\n    height\n  } = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {\n    x,\n    width\n  } = size;\n  const caret = options.caretSize + options.caretPadding;\n\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {\n    x,\n    width\n  } = size;\n  const {\n    width: chartWidth,\n    chartArea: {\n      left,\n      right\n    }\n  } = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {\n    x,\n    width\n  } = size;\n\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {\n    y,\n    height\n  } = size;\n\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n\n  return y;\n}\n\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {\n    caretSize,\n    caretPadding,\n    cornerRadius\n  } = options;\n  const {\n    xAlign,\n    yAlign\n  } = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {\n    topLeft,\n    topRight,\n    bottomLeft,\n    bottomRight\n  } = toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  beforeTitle: noop,\n\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n\n  afterTitle: noop,\n  beforeBody: noop,\n  beforeLabel: noop,\n\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n\n    const value = tooltipItem.formattedValue;\n\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n\n    return label;\n  },\n\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0\n    };\n  },\n\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation\n    };\n  },\n\n  afterLabel: noop,\n  afterBody: noop,\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nclass Tooltip extends Element {\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n  }\n\n  getBody(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const bodyItems = [];\n    each(tooltipItems, context => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n  }\n\n  getFooter(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    each(tooltipItems, context => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {\n        chart: this.chart,\n        tooltip: this,\n        replay\n      });\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      caretSize,\n      cornerRadius\n    } = options;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(cornerRadius);\n    const {\n      x: ptX,\n      y: ptY\n    } = tooltipPoint;\n    const {\n      width,\n      height\n    } = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + height / 2;\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n\n      y3 = y1;\n    }\n\n    return {\n      x1,\n      x2,\n      x3,\n      y1,\n      y2,\n      y3\n    };\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {\n      boxHeight,\n      boxWidth\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {\n      body\n    } = this;\n    const {\n      bodySpacing,\n      bodyAlign,\n      displayColors,\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function (line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      x,\n      y\n    } = pt;\n    const {\n      width,\n      height\n    } = tooltipSize;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n\n      if (!position) {\n        return;\n      }\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(_ref6 => {\n      let {\n        datasetIndex,\n        index\n      } = _ref6;\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  handleEvent(e, replay) {\n    let inChartArea = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    const positionChanged = this._positionChanged(active, e);\n\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      return lastActive;\n    }\n\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  _positionChanged(active, e) {\n    const {\n      caretX,\n      caretY,\n      options\n    } = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n\n}\n\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        chart,\n        options\n      });\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', { ...args,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: name => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Colors: plugin_colors,\n  Decimation: plugin_decimation,\n  Filler: index,\n  Legend: plugin_legend,\n  SubTitle: plugin_subtitle,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({\n      index,\n      label: raw\n    });\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n\n  return value;\n}\n\nclass CategoryScale extends Scale {\n  static id = 'category';\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n\n    if (added.length) {\n      const labels = this.getLabels();\n\n      for (const {\n        index,\n        label\n      } of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n\n      this._addedLabels = [];\n    }\n\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({\n        value\n      });\n    }\n\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {\n    bounds,\n    step,\n    min,\n    max,\n    precision,\n    count,\n    maxTicks,\n    maxDigits,\n    includeBounds\n  } = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {\n    min: rmin,\n    max: rmax\n  } = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n\n      if (niceMin < min) {\n        j++;\n      }\n\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n\n    ticks.push({\n      value: tickValue\n    });\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, _ref7) {\n  let {\n    horizontal,\n    minRotation\n  } = _ref7;\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {\n      beginAtZero\n    } = this.options;\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this;\n\n    const setMin = v => min = minDefined ? min : v;\n\n    const setMax = v => max = maxDefined ? max : v;\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {\n      maxTicksLimit,\n      stepSize\n    } = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n}\n\nclass LinearScale extends LinearScaleBase {\n  static id = 'linear';\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? min : 0;\n    this.max = isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n\n    const tickFont = this._resolveTickFontOptions(0);\n\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n\n}\n\nconst log10Floor = v => Math.floor(log10(v));\n\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n\n  return Math.min(rangeExp, log10Floor(min));\n}\n\nfunction generateTicks(generationOptions, _ref8) {\n  let {\n    min,\n    max\n  } = _ref8;\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n\n  while (value < max) {\n    ticks.push({\n      value,\n      major: isMajor(value),\n      significand\n    });\n\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(lastTick),\n    significand\n  });\n  return ticks;\n}\n\nclass LogarithmicScale extends Scale {\n  static id = 'logarithmic';\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => min = minDefined ? min : v;\n\n    const setMax = v => max = maxDefined ? max : v;\n\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n\n    if (max <= 0) {\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n\n    return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n\n}\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {\n    extra,\n    additionalAngle,\n    padding,\n    size\n  } = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    visible: true,\n    x: pointLabelPosition.x,\n    y,\n    textAlign,\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\n\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n\n  const apexesInArea = _isPointInArea({\n    x: left,\n    y: top\n  }, area) || _isPointInArea({\n    x: left,\n    y: bottom\n  }, area) || _isPointInArea({\n    x: right,\n    y: top\n  }, area) || _isPointInArea({\n    x: right,\n    y: bottom\n  }, area);\n\n  return !apexesInArea;\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {\n    centerPointLabels,\n    display\n  } = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= w / 2;\n  }\n\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= h / 2;\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n\n  return y;\n}\n\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n  const {\n    backdropColor\n  } = opts;\n\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {\n    ctx,\n    options: {\n      pointLabels\n    }\n  } = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n\n    if (!item.visible) {\n      continue;\n    }\n\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {\n      x,\n      y,\n      textAlign\n    } = item;\n    renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {\n    ctx\n  } = scale;\n\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {\n    color,\n    lineWidth\n  } = gridLineOpts;\n\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nclass RadialLinearScale extends LinearScaleBase {\n  static id = 'radialLinear';\n  static defaults = {\n    display: true,\n    animate: true,\n    position: 'chartArea',\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    grid: {\n      circular: false\n    },\n    startAngle: 0,\n    ticks: {\n      showLabelBackdrop: true,\n      callback: Ticks.formatters.numeric\n    },\n    pointLabels: {\n      backdropColor: undefined,\n      backdropPadding: 2,\n      display: true,\n      font: {\n        size: 10\n      },\n\n      callback(label) {\n        return label;\n      },\n\n      padding: 5,\n      centerPointLabels: false\n    }\n  };\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(false);\n    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels().map((value, index) => {\n      const label = callback(this.options.pointLabels.callback, [value, index], this);\n      return label || label === 0 ? label : '';\n    }).filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter) {\n    let additionalAngle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {\n      left,\n      top,\n      right,\n      bottom\n    } = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n\n  drawBackground() {\n    const {\n      backgroundColor,\n      grid: {\n        circular\n      }\n    } = this.options;\n\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {\n      angleLines,\n      grid,\n      border\n    } = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {\n          color,\n          lineWidth\n        } = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  drawBorder() {}\n\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color\n      });\n    });\n    ctx.restore();\n  }\n\n  drawTitle() {}\n\n}\n\nconst INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nconst UNITS = /* #__PURE__ */Object.keys(INTERVALS);\n\nfunction sorter(a, b) {\n  return a - b;\n}\n\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {\n    parser,\n    round,\n    isoWeekday\n  } = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {\n      lo,\n      hi\n    } = _lookup(timestamps, time);\n\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n\n  return ticks;\n}\n\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nclass TimeScale extends Scale {\n  static id = 'time';\n  static defaults = {\n    bounds: 'data',\n    adapters: {},\n    time: {\n      parser: false,\n      unit: false,\n      round: false,\n      isoWeekday: false,\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      source: 'auto',\n      callback: false,\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    adapter.init(opts);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n\n    return {\n      min,\n      max\n    };\n  }\n\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  initOffsets() {\n    let timestamps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    this._offsets = {\n      start,\n      end,\n      factor: 1 / (start + 1 + end)\n    };\n  }\n\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return callback(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n    };\n  }\n\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n\n    const size = this._getLabelSize(exampleLabel);\n\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return this._cache.data = metas[0].controller.getAllParsedValues(this);\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return this._cache.data = this.normalize(timestamps);\n  }\n\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n  }\n\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n\n}\n\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'pos', val));\n    }\n\n    ({\n      pos: prevSource,\n      time: prevTarget\n    } = table[lo]);\n    ({\n      pos: nextSource,\n      time: nextTarget\n    } = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'time', val));\n    }\n\n    ({\n      time: prevSource,\n      pos: prevTarget\n    } = table[lo]);\n    ({\n      time: nextSource,\n      pos: nextTarget\n    } = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n  static id = 'timeseries';\n  static defaults = TimeScale.defaults;\n\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  buildLookupTable(timestamps) {\n    const {\n      min,\n      max\n    } = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n\n    return table;\n  }\n\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nconst registerables = [controllers, elements, plugins, scales];\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };","map":{"version":3,"sources":["C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\core\\core.animator.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\core\\core.animation.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\core\\core.animations.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\core\\core.datasetController.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\controllers\\controller.bar.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\controllers\\controller.bubble.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\controllers\\controller.doughnut.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\controllers\\controller.line.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\controllers\\controller.polarArea.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\controllers\\controller.pie.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\controllers\\controller.radar.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\controllers\\controller.scatter.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\core\\core.adapters.ts","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\core\\core.interaction.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\core\\core.layouts.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\platform\\platform.base.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\platform\\platform.basic.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\platform\\platform.dom.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\platform\\index.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\core\\core.element.ts","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\core\\core.scale.autoskip.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\core\\core.scale.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\core\\core.typedRegistry.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\core\\core.registry.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\core\\core.plugins.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\core\\core.config.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\core\\core.controller.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\elements\\element.arc.ts","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\elements\\element.line.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\elements\\element.point.ts","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\elements\\element.bar.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\plugins\\plugin.colors.ts","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\plugins\\plugin.decimation.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.segment.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.helper.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.options.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.stack.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\simpleArc.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.drawing.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\index.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\plugins\\plugin.legend.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\plugins\\plugin.title.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\plugins\\plugin.subtitle.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\plugins\\plugin.tooltip.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\scales\\scale.category.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\scales\\scale.linearbase.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\scales\\scale.linear.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\scales\\scale.logarithmic.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\scales\\scale.radialLinear.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\scales\\scale.time.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\scales\\scale.timeseries.js","C:\\Users\\rchav\\Downloads\\Frontend\\dashboard\\node_modules\\chart.js\\src\\index.ts"],"names":["Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","requestAnimFrame","call","window","_update","Date","now","remaining","running","items","length","i","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","transparent","interpolators","boolean","from","to","factor","color","c0","helpersColor","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","resolve","_fn","_easing","effects","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","getOwnPropertyNames","key","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","animator","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","isFinite","sign","convertObjectDataToArray","data","adata","Array","isStacked","meta","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","datasetElementType","dataElementType","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","defined","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","inflateAmount","BarController","grouped","numbers","overrides","_index_","offset","grid","_value_","beginAtZero","iAxisKey","vAxisKey","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","skipNull","val","isNaN","indexOf","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","animateRotate","animateScale","spacing","descriptors","_scriptable","_indexable","startsWith","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","borderWidth","onClick","e","legendItem","toggleDataVisibility","innerRadius","outerRadius","getter","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","toDimension","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","arc","metaData","formatNumber","locale","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","LineController","showLine","spanGaps","line","_dataset","animationsDisabled","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","segment","animated","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","angleLines","display","circular","pointLabels","_parseObjectDataRadialScale","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","interaction","registry","getElement","abstract","Error","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","getProps","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","defaultRoutes","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","result","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","finiteOrDefault","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","callback","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","clipArea","renderTextOptions","renderText","unclipArea","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","merge","routeDefaults","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","callCallback","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","d","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","isFunction","subResolver","_attachContext","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getDatasetArea","Chart","version","invalidatePlugins","userConfig","initialCanvas","existingChart","uid","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","resizeDelay","_initialize","maintainAspectRatio","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","setsEqual","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","Interaction","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","_isClickEvent","onHover","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","_readValueToProps","parseBorderRadius","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","betweenAngles","withinRadius","_isBetween","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","capBezierPoints","_points","_segments","_pointsUpdated","_updateBezierControlPoints","_computeSegments","interpolate","_boundSegments","_interpolate","interpolated","hitRadius","PointElement","hoverRadius","mouseX","mouseY","inXRange","inYRange","drawPoint","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","addRectPath","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","containsColorsDefinition","forceOverride","_args","chartOptions","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","algorithm","beforeElementsUpdate","xAxis","threshold","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","_boundSegment","fillSource","_getEdge","_normalizeAngle","_pointsFromSegments","boundary","linePoints","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","clipVertical","clipY","lineLoop","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","getRtlAdapter","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","_element","afterEvent","ci","useBorderRadius","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","WeakMap","positioners","average","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","afterInit","afterDraw","_fallback","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","generateTicks","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","tickValue","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","minExp","exp","significand","lastTick","LogarithmicScale","logarithmic","_zero","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","createPointLabelItem","itemOpts","outerDistance","extra","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","isNotOverlapped","apexesInArea","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawPointLabels","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","animate","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","adapters","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"mappings":"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","sourcesContent":["import {requestAnimFrame} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('./core.animation.js').default } Animation\n * @typedef { import('./core.controller.js').default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n","import effects from '../helpers/helpers.easing.js';\nimport {resolve} from '../helpers/helpers.options.js';\nimport {color as helpersColor} from '../helpers/helpers.color.js';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n","import animator from './core.animator.js';\nimport Animation from './core.animation.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isObject} from '../helpers/helpers.core.js';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n","import Animations from './core.animations.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\nimport {createContext, sign} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('./core.scale.js').default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\n\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (an thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal meta data accordingly.\n\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers/index.js';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n\n    const skipNull = (meta) => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        // visual data coordinates after applying minBarLength\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {valueOrDefault} from '../helpers/helpers.core.js';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash'),\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n","import DoughnutController from './controller.doughnut.js';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%'\n  };\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n","/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartOptions} from '../types/index.js';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<string, string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: TimeUnit): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: TimeUnit): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek'): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<string, string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase\n};\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\nimport {_isPointInArea} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\n * @typedef { import('../types/index.js').Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\nimport {toPadding} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n","\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import('../core/core.config.js').default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n","/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base.js';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n","/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base.js';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\nimport {throttled} from '../helpers/helpers.extras.js';\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\n\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n","import {_isDomSupported} from '../helpers/index.js';\nimport BasePlatform from './platform.base.js';\nimport BasicPlatform from './platform.basic.js';\nimport DomPlatform from './platform.dom.js';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n","import type {AnyObject} from '../types/basic.js';\nimport type {Point} from '../types/geometric.js';\nimport type {Animation} from '../types/animation.js';\nimport {isNumber} from '../helpers/helpers.math.js';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\nimport {_factorize} from '../helpers/helpers.math.js';\n\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale.js').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n","import Element from './core.element.js';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\nimport {autoSkip} from './core.scale.autoskip.js';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\n/**\n * @typedef { import('../types/index.js').Chart } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  /** @type {CanvasTextAlign} */\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  /**\n   * @return {import('../types.js').LabelItem[]}\n   */\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = /** @type {string} */ (label[j]);\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n","import {merge} from '../helpers/index.js';\nimport defaults, {overrides} from './core.defaults.js';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n","import DatasetController from './core.datasetController.js';\nimport Element from './core.element.js';\nimport Scale from './core.scale.js';\nimport TypedRegistry from './core.typedRegistry.js';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins.js';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap.js';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n","import registry from './core.registry.js';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import('./core.config.js').default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n","import defaults, {overrides, descriptors} from './core.defaults.js';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, ...scaleOptions) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis\n      || axisFromPosition(opts.position)\n      || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {axis};\n  }\n}\n\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter((d) => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n","import animator from './core.animator.js';\nimport defaults, {overrides} from './core.defaults.js';\nimport Interaction from './core.interaction.js';\nimport layouts from './core.layouts.js';\nimport {_detectPlatform} from '../platform/index.js';\nimport PluginService from './core.plugins.js';\nimport registry from './core.registry.js';\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\nimport {retinaScale, _isDomSupported} from '../helpers/helpers.dom.js';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea} from '../helpers/index.js';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nfunction getDatasetArea(meta) {\n  const {xScale, yScale} = meta;\n  if (xScale && yScale) {\n    return {\n      left: xScale.left,\n      right: xScale.right,\n      top: yScale.top,\n      bottom: yScale.bottom\n    };\n  }\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta) || this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the envent inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../types/index.js').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n","import Element from '../core/core.element.js';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math.js';\nimport {_readValueToProps} from '../helpers/helpers.options.js';\nimport type {ArcOptions, Point} from '../types/index.js';\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle, borderDash, borderDashOffset} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius'\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n","import Element from '../core/core.element.js';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\nimport {valueOrDefault} from '../helpers/index.js';\n\n/**\n * @typedef { import('./element.point.js').default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\n/**\n * @returns {any}\n */\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n","import Element from '../core/core.element.js';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport type {\n  CartesianParsedData,\n  ChartArea,\n  Point,\n  PointHoverOptions,\n  PointOptions,\n} from '../types/index.js';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n","import Element from '../core/core.element.js';\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n","import {DoughnutController, PolarAreaController} from '../index.js';\nimport type {Chart, ChartDataset} from '../types.js';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n  forceOverride?: boolean;\n}\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n\n  return i;\n}\n\nfunction getColorizer(chart: Chart) {\n  let i = 0;\n\n  return (dataset: ChartDataset, datasetIndex: number) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(\n  descriptor: ColorsDescriptor\n) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  } as ColorsPluginOptions,\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {datasets},\n      options: chartOptions\n    } = chart.config;\n    const {elements} = chartOptions;\n\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || (elements && containsColorsDefinitions(elements)))) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n\n    datasets.forEach(colorizer);\n  }\n};\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data,\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {isArray} from '../../helpers/index.js';\nimport {_pointsFromSegments} from './filler.segment.js';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.line.js').default } LineElement\n * @typedef { import('../../types/index.js').FillTarget } FillTarget\n * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {_isBetween} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of an segment -> need to add another point before this,\n      // from next line below.\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of an segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n","import {TAU} from '../../helpers/index.js';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n","import {isFinite} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\nimport {_buildStackLine} from './filler.target.stack.js';\nimport {simpleArc} from './simpleArc.js';\n\n/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n","import {clipArea, unclipArea} from '../../helpers/index.js';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\nimport {_getTarget} from './filler.target.js';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n","/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line.js';\nimport {_drawfill} from './filler.drawing.js';\nimport {_shouldApplyFill} from './filler.helper.js';\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n","import defaults from '../core/core.defaults.js';\nimport Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index.js';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n","import Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\nimport {renderText} from '../helpers/helpers.canvas.js';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import {Title} from './plugin.title.js';\nimport layouts from '../core/core.layouts.js';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import Animations from '../core/core.animations.js';\nimport Element from '../core/core.element.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\nimport {createContext, drawPoint} from '../helpers/index.js';\n\n/**\n * @typedef { import('../platform/platform.base.js').Chart } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').ActiveElement } ActiveElement\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : (labelColor.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n","import Scale from '../core/core.scale.js';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({value: tickValue});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n","import {isFinite} from '../helpers/helpers.core.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {toRadians} from '../helpers/index.js';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n","import defaults from '../core/core.defaults.js';\nimport {_longestText, addRoundedRectPath, renderText, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {extra, additionalAngle, padding, size} = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    // if to draw or overlapped\n    visible: true,\n\n    // Text position\n    x: pointLabelPosition.x,\n    y,\n\n    // Text rendering data\n    textAlign,\n\n    // Bounding box\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\n\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {left, top, right, bottom} = item;\n  const apexesInArea = _isPointInArea({x: left, y: top}, area) || _isPointInArea({x: left, y: bottom}, area) ||\n    _isPointInArea({x: right, y: top}, area) || _isPointInArea({x: right, y: bottom}, area);\n  return !apexesInArea;\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {centerPointLabels, display} = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {left, top, right, bottom} = item;\n  const {backdropColor} = opts;\n\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius,\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      // overlapping\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign} = item;\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n","import adapters from '../core/core.adapters.js';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\n\n/**\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if its not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, /** @type {Unit} */ (parser))\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @private\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * @param {number} value\n\t * @param {string|undefined} format\n\t * @return {string}\n\t */\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guesstimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n","import TimeScale from './scale.time.js';\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n","export * from './controllers/index.js';\nexport * from './core/index.js';\nexport * from './elements/index.js';\nexport * from './platform/index.js';\nexport * from './plugins/index.js';\nexport * from './scales/index.js';\n\nimport * as controllers from './controllers/index.js';\nimport * as elements from './elements/index.js';\nimport * as plugins from './plugins/index.js';\nimport * as scales from './scales/index.js';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n"]},"metadata":{},"sourceType":"module"}