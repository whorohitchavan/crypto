{"ast":null,"code":"var _jsxFileName = \"F:\\\\FSD-FT\\\\project\\\\New folder\\\\New folder\\\\crypto\\\\dashboard\\\\src\\\\components\\\\Coinchart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport axios from \"axios\";\nimport moment from \"moment-timezone\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nexport function CoinChart(props) {\n  _s();\n\n  const [coinval, setCoindata] = useState([]);\n\n  const Totaldata = data => {\n    const url = `https://api.coingecko.com/api/v3/coins/${data.id}/market_chart?vs_currency=${data.currency}&days=${data.days}`;\n    axios.get(url).then(res => {\n      setCoindata(res.data);\n      console.log(res.data);\n    });\n  };\n\n  Totaldata(props);\n  {\n    /*const coinChartData=coinval.prices.map(value=>({\r\n     x:value[0],y:value[1].toLocalString().toFixed(2)\r\n    }));*/\n    {\n      /*coinChartData.map(value=>{\r\n               moment(value.x).format('MMMDD')\r\n             })*/\n    }\n    {\n      /*coinChartData.map(value=>value.y)*/\n    }\n  }\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: `${props.id} Chart`\n      }\n    }\n  };\n  const data = {\n    labels: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    datasets: [{\n      label: `${props.id} in ${props.currency}`,\n      data: [10, 1, 2, 4, 5, 8, 76, 2, 1],\n      borderColor: 'rgb(255, 99, 132)',\n      backgroundColor: 'rgba(255, 99, 132, 0.5)'\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }, this)\n  }, void 0, false);\n}\n\n_s(CoinChart, \"6KyL9TQ6b9hXnDTlOjye0E7ZxDk=\");\n\n_c = CoinChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoinChart\");","map":{"version":3,"sources":["F:/FSD-FT/project/New folder/New folder/crypto/dashboard/src/components/Coinchart.js"],"names":["React","useEffect","useState","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","axios","moment","register","CoinChart","props","coinval","setCoindata","Totaldata","data","url","id","currency","days","get","then","res","console","log","options","responsive","plugins","legend","position","title","display","text","labels","datasets","label","borderColor","backgroundColor"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SACIC,KAAK,IAAIC,OADb,EAEIC,aAFJ,EAGIC,WAHJ,EAIIC,YAJJ,EAKIC,WALJ,EAMIC,KANJ,EAOIC,OAPJ,EAQIC,MARJ,QASS,UATT;AAUE,SAASC,IAAT,QAAqB,iBAArB;AACF,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;;AACEV,OAAO,CAACW,QAAR,CACEV,aADF,EAEEC,WAFF,EAGEC,YAHF,EAIEC,WAJF,EAKEC,KALF,EAMEC,OANF,EAOEC,MAPF;AAWF,OAAO,SAASK,SAAT,CAAmBC,KAAnB,EAAyB;AAAA;;AAE9B,QAAK,CAACC,OAAD,EAASC,WAAT,IAAsBjB,QAAQ,CAAC,EAAD,CAAnC;;AAEA,QAAMkB,SAAS,GAAEC,IAAD,IAAU;AACxB,UAAMC,GAAG,GAAI,0CAAyCD,IAAI,CAACE,EAAG,6BAA4BF,IAAI,CAACG,QAAS,SAAQH,IAAI,CAACI,IAAK,EAA1H;AACAZ,IAAAA,KAAK,CAACa,GAAN,CAAUJ,GAAV,EAAeK,IAAf,CACKC,GAAD,IAAS;AAAET,MAAAA,WAAW,CAACS,GAAG,CAACP,IAAL,CAAX;AACXQ,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACP,IAAhB;AAAuB,KAF3B;AAIH,GANC;;AAOFD,EAAAA,SAAS,CAACH,KAAD,CAAT;AAEA;AAAC;AACD;AACA;AACA;AAAC;AACD;AACA;AAAa;AAAA;AAAC;AAAsC;AAAC;AACjD,QAAMc,OAAO,GAAG;AACZC,IAAAA,UAAU,EAAE,IADA;AAEZC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAE;AADJ,OADD;AAIPC,MAAAA,KAAK,EAAE;AACLC,QAAAA,OAAO,EAAE,IADJ;AAELC,QAAAA,IAAI,EAAG,GAAErB,KAAK,CAACM,EAAG;AAFb;AAJA;AAFG,GAAhB;AAcC,QAAMF,IAAI,GAAG;AACVkB,IAAAA,MAAM,EAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB,CADG;AAEVC,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAG,GAAExB,KAAK,CAACM,EAAG,OAAMN,KAAK,CAACO,QAAS,EAD1C;AAEEH,MAAAA,IAAI,EAAC,CAAC,EAAD,EAAI,CAAJ,EAAM,CAAN,EAAQ,CAAR,EAAU,CAAV,EAAY,CAAZ,EAAc,EAAd,EAAiB,CAAjB,EAAmB,CAAnB,CAFP;AAGEqB,MAAAA,WAAW,EAAE,mBAHf;AAIEC,MAAAA,eAAe,EAAE;AAJnB,KADQ;AAFA,GAAb;AAYD,sBACI;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,OAAO,EAAEZ,OAAf;AAAwB,MAAA,IAAI,EAAEV;AAA9B;AAAA;AAAA;AAAA;AAAA;AADF,mBADJ;AAMH;;GAnDeL,S;;KAAAA,S","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n  } from 'chart.js';\r\n  import { Line } from 'react-chartjs-2';\r\nimport axios from \"axios\";\r\nimport moment from \"moment-timezone\";\r\n  ChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n  );\r\n\r\n\r\nexport function CoinChart(props){\r\n\r\n  const[coinval,setCoindata]=useState([]);\r\n  \r\n  const Totaldata=(data) => {\r\n    const url = `https://api.coingecko.com/api/v3/coins/${data.id}/market_chart?vs_currency=${data.currency}&days=${data.days}`\r\n    axios.get(url).then(\r\n        (res) => { setCoindata(res.data)\r\n        console.log(res.data) }               \r\n    )\r\n};\r\nTotaldata(props);\r\n\r\n{/*const coinChartData=coinval.prices.map(value=>({\r\n  x:value[0],y:value[1].toLocalString().toFixed(2)\r\n}));*/\r\n{/*coinChartData.map(value=>{\r\n          moment(value.x).format('MMMDD')\r\n        })*/}{/*coinChartData.map(value=>value.y)*/}}\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n          legend: {\r\n            position: 'top',\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: `${props.id} Chart`,\r\n          },\r\n        },\r\n      };\r\n      \r\n      \r\n     const data = {\r\n        labels:[1,2,3,4,5,6,7,8,9],\r\n        datasets: [\r\n          {\r\n            label: `${props.id} in ${props.currency}`,\r\n            data:[10,1,2,4,5,8,76,2,1],\r\n            borderColor: 'rgb(255, 99, 132)',\r\n            backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n          },\r\n        ],\r\n      };\r\n\r\n    return(\r\n        <>\r\n          <Line options={options} data={data} />\r\n        </>\r\n    )\r\n\r\n}\r\n  "]},"metadata":{},"sourceType":"module"}