{"ast":null,"code":"/*import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n  } from 'chart.js';\r\n  import { Line } from 'react-chartjs-2';\r\nimport axios from \"axios\";\r\nimport moment from \"moment-timezone\";\r\n  ChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n  );\r\n\r\n\r\nexport default function CoinChart(props){\r\n  const {id,currency,days}=props;\r\n  \r\n  \r\n  useEffect(() => {\r\n    console.log(id,currency,days)\r\n    \r\n   /* axios.get(url).then(\r\n        (res) => { setCoindata(res.data)\r\n        console.log(res.data) }               \r\n    )\r\n})\r\nconsole.log(coinval)\r\n/*const coinChartData=coinval.prices.map(value=>({\r\n  x:value[0],y:value[1].toLocalString().toFixed(2)\r\n}));\r\n\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n          legend: {\r\n            position: 'top',\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: `${id} Chart`,\r\n          },\r\n        },\r\n      };\r\n      \r\n      \r\n     const data = {\r\n        labels:[1,2,3,4,5,6,7]\r\n        /*coinChartData.map(value=>{\r\n                  moment(value.x).format('MMMDD')\r\n                }),\r\n        datasets: [\r\n          {\r\n            label: `${id} in ${currency}`,\r\n            data:[1,2,3,4,5,6,7],\r\n            //coinChartData.map(value=>value.y),\r\n            borderColor: 'rgb(255, 99, 132)',\r\n            backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n          },\r\n        ],\r\n      };\r\n\r\n    return(\r\n        <>\r\n          <Line options={options} data={data} />\r\n        </>\r\n    )\r\n\r\n}\r\n  */","map":{"version":3,"sources":["F:/FSD-FT/project/New folder/New folder/crypto/dashboard/src/components/Coinchart.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/*import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n  } from 'chart.js';\r\n  import { Line } from 'react-chartjs-2';\r\nimport axios from \"axios\";\r\nimport moment from \"moment-timezone\";\r\n  ChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n  );\r\n\r\n\r\nexport default function CoinChart(props){\r\n  const {id,currency,days}=props;\r\n  \r\n  \r\n  useEffect(() => {\r\n    console.log(id,currency,days)\r\n    \r\n   /* axios.get(url).then(\r\n        (res) => { setCoindata(res.data)\r\n        console.log(res.data) }               \r\n    )\r\n})\r\nconsole.log(coinval)\r\n/*const coinChartData=coinval.prices.map(value=>({\r\n  x:value[0],y:value[1].toLocalString().toFixed(2)\r\n}));\r\n\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n          legend: {\r\n            position: 'top',\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: `${id} Chart`,\r\n          },\r\n        },\r\n      };\r\n      \r\n      \r\n     const data = {\r\n        labels:[1,2,3,4,5,6,7]\r\n        /*coinChartData.map(value=>{\r\n                  moment(value.x).format('MMMDD')\r\n                }),\r\n        datasets: [\r\n          {\r\n            label: `${id} in ${currency}`,\r\n            data:[1,2,3,4,5,6,7],\r\n            //coinChartData.map(value=>value.y),\r\n            borderColor: 'rgb(255, 99, 132)',\r\n            backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n          },\r\n        ],\r\n      };\r\n\r\n    return(\r\n        <>\r\n          <Line options={options} data={data} />\r\n        </>\r\n    )\r\n\r\n}\r\n  */"]},"metadata":{},"sourceType":"module"}